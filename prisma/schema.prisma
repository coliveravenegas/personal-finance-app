generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  budgets       Budget[]
  categories    Category[]
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Category {
  id           String          @id @default(cuid())
  name         String
  type         TransactionType
  icon         String?
  userId       String?
  user         User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]
  isDefault    Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@unique([name, type])
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  type        TransactionType
  categoryId  String
  category    Category        @relation(fields: [categoryId], references: [id])
  description String?
  date        DateTime        @default(now())
  tags        String[]
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Budget {
  id         String    @id @default(cuid())
  amount     Float
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  month      Int
  year       Int
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([userId, categoryId, month, year])
} 